{"version":3,"file":"testModelsTensorflow.js","sourceRoot":"","sources":["../testModelsTensorflow.ts"],"names":[],"mappings":"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AC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,CAAC;AACxF,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACpH,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACzF,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACzF,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE3F,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC5B,uDAAuD;AACvD,+DAA+D;AAE/D,MAAM,SAAS,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAC;IACvB,MAAM,IAAI,GAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;QAElC,MAAM,gBAAgB,GAAgB,EAAE,CAAA;QAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAC,iBAAiB,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;YAC1C,MAAM,SAAS,GAAG,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpD,uFAAuF;YACvF,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAChD,MAAM,iBAAiB,GAAgB,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAgB,CAAC;YAEnJ,MAAM,mBAAmB,GAAc,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAExG,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC9C;QACD,MAAM,gBAAgB,GAAc,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,EAAE,CAAC;QAC1E,gBAAgB,CAAC,KAAK,EAAE,CAAA;QACxB,CAAC,CAAC,KAAK,EAAE,CAAA;QACT,MAAM,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,UAAU,GAAc,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/C,OAAO,UAAU,CAAA;IACjB,CAAC,EAAE,IAAI,CAAE,CAAC;CACjB","sourcesContent":["import * as tf from '@tensorflow/tfjs-node';\nimport * as fs from 'fs';\n\n// This is tensorflow for cpu, if we were to train and it takes long we can change to gpu probably.\n// https://towardsdatascience.com/how-to-do-deep-learning-on-graphs-with-graph-convolutional-networks-62acf5b143d0\n\nexport class graphConvolutionLayer extends tf.layers.Layer{\n\n    activationLayer: any;\n    mInput: tf.Tensor2D;\n    inputSize: number;\n    outputSize: number;\n    mAdjacency: tf.Tensor2D;\n    mIdentity: tf.Tensor2D;\n    mAdjacencyHat: tf.Tensor2D;\n    mWeights: tf.Variable;\n\n    fs: any;\n    path: any;\n    modelDirectory: string;\n\n    public static className: string = 'graphConvolutionLayer'; \n\n    constructor(inputSize: number, outputSize: number, activationName: string, layerName?: string) {\n        super({});\n        this.path = require('path');\n        this.fs = require('fs');\n        this.modelDirectory = this.getModelDirectory();\n\n        // Define the activation layer used in this layer\n        this.activationLayer = tf.layers.activation(<any>{activation: activationName});\n        // Define input feature size\n        this.inputSize = inputSize;\n        // Define output feature size, which is size of node representations\n        this.outputSize = outputSize;\n        if (layerName){\n            this.mWeights = tf.variable(tf.randomNormal([this.inputSize, this.outputSize]), true,\n            layerName);\n        }\n        else{\n            this.mWeights = tf.variable(tf.randomNormal([this.inputSize, this.outputSize]), true);\n        }\n    }\n    public async loadWeights(loadPath: string): Promise<void>{\n        const fileLocation = this.path.join(this.modelDirectory, loadPath);\n        const weights = await this.readWeightFile(fileLocation);\n        this.mWeights.assign(weights);\n    }\n\n    private readWeightFile(fileLocationWeights: string){\n        const readWeights = new Promise<tf.Tensor>( (resolve, reject) => {\n            fs.readFile(fileLocationWeights, 'utf8', async function (err, data) {\n                if (err) throw err;\n                const weightArray: number[][] = JSON.parse(data);\n                // const weights: tf.Tensor[] = weightArray.map((x: number[]) => tf.tensor(x));\n                const weights: tf.Tensor = tf.tensor(weightArray);\n                resolve(weights);\n              });\n        })\n        return readWeights;\n\n    }\n\n    public async saveWeights(savePath: string): Promise<void> {\n        const weights = await this.mWeights.array();\n        const fileLocation = this.path.join(this.modelDirectory, savePath);\n        fs.writeFile(fileLocation, JSON.stringify(weights), function(err: any) {\n            if(err) {\n                return console.log(err);\n            }\n        }); \n    }\n\n    \n    // I should call build function for flexibility, not sure if I need it yet, but might become needed\n    call(input: tf.Tensor2D,  mAdjacency: tf.Tensor2D, kwargs?: any) {\n        return tf.tidy(() => {\n            /*  Get inverted square of node degree diagonal matrix */\n            const mD: tf.Tensor2D = tf.sum(mAdjacency, 1);\n            const mDInv: tf.Tensor = tf.diag(tf.rsqrt(mD));\n\n            // Normalised adjecency matrix, we perform this is initialisation to not compute it in the call\n            const mAdjacencyHat: tf.Tensor2D = tf.matMul(tf.matMul(mDInv, mAdjacency), mDInv);\n\n            // Tensor that denotes the signal travel in convolution\n            const mSignalTravel: tf.Tensor = tf.matMul(mAdjacencyHat, input);\n            // Output of convolution, by multiplying with weight matrix and applying non-linear activation function\n            // Check if activation function is ok\n            const mWeightedSignal: tf.Tensor = this.activationLayer.apply(tf.matMul(mSignalTravel, this.mWeights));\n            return mWeightedSignal;\n            }\n        )\n    }\n\n    getClassName() {\n        return 'Graph Convolution';\n    }\n\n    private getModelDirectory(){          \n        const modelDir: string = this.path.join(__dirname, '../../actor-rdf-join-inner-multi-reinforcement-learning/model');\n        return modelDir;\n    }\n\n\n}\n\n\nexport class graphConvolutionModel{\n    /* For now a simple constructor, should prob use a json config file and with pretrained layers*/\n    /* For saving new_model = tf.keras.models.load_model('model.h5', custom_objects={'CustomLayer': CustomLayer}) */\n    graphConvolutionalLayer1: graphConvolutionLayer;\n    graphConvolutionalLayer2: graphConvolutionLayer;\n\n    denseLayerValue: tf.layers.Layer;\n    denseLayerPolicy: tf.layers.Layer;\n\n    reluLayer: tf.layers.Layer;\n\n    denseLayerValueFileName: string;\n    denseLayerPolicyFileName: string;\n\n    model: tf.Sequential;\n\n    fs: any;\n    path: any;\n    modelDirectory: string;\n\n    public constructor(loss?: any, optimizer?: any){\n        this.fs = require('fs');\n        this.path = require('path')\n\n        this.modelDirectory = this.getModelDirectory();\n        this.denseLayerValueFileName = 'denseLayerValue';\n        this.denseLayerPolicyFileName = 'denseLayerValue';\n    \n        this.graphConvolutionalLayer1 = new graphConvolutionLayer(1, 6, \"relu\");\n        this.graphConvolutionalLayer2 = new graphConvolutionLayer(6, 6, \"relu\");\n        this.denseLayerValue = tf.layers.dense({inputShape: [6], units: 1, activation: 'linear', 'trainable': true});\n        this.denseLayerPolicy = tf.layers.dense({inputShape: [6], units: 1, activation: 'sigmoid', 'trainable': true});\n\n        this.reluLayer = tf.layers.activation({activation: 'relu', inputShape: [1], 'name': 'finalReluLayer'})\n    }\n\n    public forwardPass(inputFeatures: tf.Tensor2D, mAdjacency: tf.Tensor2D){\n        return tf.tidy(() => {\n            // inputFeatures.print();\n            const hiddenState: tf.Tensor = this.graphConvolutionalLayer1.call(inputFeatures, mAdjacency);\n            // hiddenState.print();\n            const nodeRepresentations: tf.Tensor = this.graphConvolutionalLayer2.call(tf.reshape(hiddenState, [mAdjacency.shape[0], 6]), mAdjacency);\n            // nodeRepresentations.print();\n            const outputValue = this.denseLayerValue.apply(nodeRepresentations); \n            const outputPolicy = this.denseLayerPolicy.apply(nodeRepresentations);\n            // const test = outputValue as tf.Tensor;\n            // test.print();\n            const outputValueRelu = this.reluLayer.apply(outputValue);\n            return [outputValueRelu, outputPolicy] as tf.Tensor[]\n        }\n        )\n    }\n\n    public saveModel(){\n        tf.serialization.registerClass(graphConvolutionLayer);\n        \n        // Hardcoded, should be config when we are happy with performance\n        this.graphConvolutionalLayer1.saveWeights('gcnLayer1');\n        this.graphConvolutionalLayer2.saveWeights('gcnLayer2');\n        this.saveDenseLayer(this.denseLayerValue, this.denseLayerValueFileName);\n        this.saveDenseLayer(this.denseLayerPolicy, this.denseLayerPolicyFileName);\n\n\n    }\n\n    public async loadModel(){\n        const layer1 = new graphConvolutionLayer(1, 6, 'relu');\n        layer1.loadWeights('gcnLayer1');\n\n        const layer2 = new graphConvolutionLayer(6, 6, 'relu');\n        layer2.loadWeights('gcnLayer2');\n\n        const denseLayerValue = await this.loadDenseLayer(this.denseLayerValueFileName);\n        const denseLayerPolicy = await this.loadDenseLayer(this.denseLayerPolicyFileName);\n\n        this.graphConvolutionalLayer1 = layer1; this.graphConvolutionalLayer2 = layer2; this.denseLayerValue = denseLayerValue; this.denseLayerPolicy = denseLayerPolicy\n    }\n\n    public async saveDenseLayer(layer: tf.layers.Layer, fileName: string){\n        const denseConfig: tf.serialization.ConfigDict = layer.getConfig();\n        const fileLocationConfig: string = this.path.join(this.modelDirectory, fileName+'Config');\n        const fileLocationWeights: string = this.path.join(this.modelDirectory, fileName+'Weights');\n\n        fs.writeFile(fileLocationConfig, JSON.stringify(denseConfig), function(err: any) {\n            if(err) {\n                return console.log(err);\n            }\n        }); \n        const weightsLayer: tf.Tensor[] = layer.getWeights();\n\n        let weightsLayerArray: any = await Promise.all(weightsLayer.map(async x => await x.array()));\n\n        fs.writeFile(fileLocationWeights, JSON.stringify(weightsLayerArray), function(err: any) {\n            if(err) {\n                return console.log(err);\n            }\n        }); \n\n\n    }\n\n    public async loadDenseLayer(fileName: string){\n        const fileLocationWeights = this.path.join(this.modelDirectory, fileName + 'Weights');\n        const initialisedDenseLayer = new Promise<tf.layers.Layer>( (resolve, reject) => {\n\n            fs.readFile(fileLocationWeights, 'utf8', async function (err, data) {\n                if (err) throw err;\n                const weightArray: number[][] = JSON.parse(data);\n                const weights: tf.Tensor[] = weightArray.map((x: number[]) => tf.tensor(x));\n                const finalDenseLayer: tf.layers.Layer = tf.layers.dense({inputShape: [6], units: 1, activation: 'linear', weights: weights});\n                resolve(finalDenseLayer);\n              });\n        })\n\n        return initialisedDenseLayer        \n    }\n\n    private getModelDirectory(){          \n        const modelDir: string = this.path.join(__dirname, '../../actor-rdf-join-inner-multi-reinforcement-learning/model');\n        return modelDir;\n    }\n\n    private loadModelConfig(){\n        console.trace()\n        const modelDir = this.getModelDirectory();\n        const modelConfig = new Promise<string[]>( (resolve, reject) => {\n\n            fs.readFile(modelDir + '/modelConfig.json', 'utf8', async function (err, data) {\n                if (err) throw err;\n                const weightArray: string[] = JSON.parse(data)['layers'];\n                console.log(weightArray)\n                resolve(weightArray);\n              });\n        })\n    }\n\n}\n\nexport class graphConvolutionModelFunctional{\n    graphConvolutionalLayer1: graphConvolutionLayer;\n    graphConvolutionalLayer2: graphConvolutionLayer;\n\n    denseLayerValue: tf.layers.Layer;\n    denseLayerPolicy: tf.layers.Layer;\n\n    reluLayer: tf.layers.Layer;\n\n    denseLayerValueFileName: string;\n    denseLayerPolicyFileName: string;\n\n    model: tf.Sequential;\n\n    fs: any;\n    path: any;\n    modelDirectory: string;\n\n    public constructor(inputFeatureDim: number, outputFeatureDim: number){\n        const model = tf.sequential()\n        model.add(tf.layers.dense({units: inputFeatureDim, inputShape: [inputFeatureDim]}))\n        model.add(tf.layers.dense({units: 16}))\n        model.add(tf.layers.dense({units: 16}))\n        model.add(tf.layers.dense({units: outputFeatureDim}))\n        model.compile({optimizer: 'sgd', loss: 'meanSquaredError'})\n   }\n}\n\nconst model = new graphConvolutionModel();\n\nconst yArray = [10, 50, 12, 33];\nconst featureMatrix = [[1,2,3,4,5,6],[7,8,9,10,11,12], [1,2,3,4,5,7], [7,8,9,10,11,12]];\nconst adjacencyMatrixes = [[[1,1,0,0,0,0],[1,1,1,0,0,0], [0,1,1,1,0,0], [0,0,1,1,1,0], [0,0,0,1,1,1], [0,0,0,0,1,1]],\n[[1,1,0,0,0,0],[1,1,1,0,0,0], [0,1,1,1,0,0], [0,0,1,1,1,0], [0,0,0,1,1,1], [0,0,0,0,1,1]],\n[[1,1,0,0,0,0],[1,1,1,0,0,0], [0,1,1,1,0,0], [0,0,1,1,1,0], [0,0,0,1,1,1], [0,0,0,0,1,1]],\n[[1,1,0,0,0,0],[1,1,1,0,0,0], [0,1,1,1,0,0], [0,0,1,1,1,0], [0,0,0,1,1,1], [0,0,0,0,1,1]]];\n\nconst y = tf.tensor(yArray);\n// const featureMatrix = tf.tensor(featureMatrixArray);\n// const adjacencyMatrixes = tf.tensor(adjacencyMatrixeSArray);\n\nconst optimizer = tf.train.adam(.05);\nfor (let i = 0; i<150; i++){\n    const loss =  optimizer.minimize(() => {\n\n        const valuePredictions: tf.Tensor[] = []\n    \n        for (let i = 0;i<adjacencyMatrixes.length;i++){\n            const adjTensor = tf.tensor2d(adjacencyMatrixes[i]);\n    \n            /* Pretend we don't know the prediction output of our join node for training purposes*/\n            featureMatrix[i][featureMatrix[i].length-1] = 0;\n            const forwardPassOutput: tf.Tensor[] = model.forwardPass(tf.tensor2d(featureMatrix[i], [adjacencyMatrixes[i].length,1]), adjTensor) as tf.Tensor[];\n    \n            const joinValuePrediction: tf.Tensor = forwardPassOutput[0].slice([forwardPassOutput[0].shape[0]-1, 0]);\n    \n            valuePredictions.push(joinValuePrediction);\n        }\n        const predictionTensor: tf.Tensor = tf.concat(valuePredictions).squeeze();\n        predictionTensor.print()\n        y.print()\n        const loss = tf.losses.meanSquaredError(y, predictionTensor);\n        loss.data().then(l => console.log('Loss', l));\n        const scalarLoss: tf.Scalar = tf.squeeze(loss);\n        return scalarLoss\n        }, true)!;    \n}\n"]}