{"version":3,"file":"testHttp.js","sourceRoot":"","sources":["../testHttp.ts"],"names":[],"mappings":";AAAA,+BAA+B;AAC/B,mCAAmC;AACnC,mCAAmC;AAEnC,wBAAwB;AACxB,2BAA2B;AAC3B,gBAAgB;AAChB,qBAAqB;AACrB,oBAAoB;AACpB,eAAe;AACf,yBAAyB;AACzB,2DAA2D;AAC3D,MAAM;AACN,KAAK;AAEL,mBAAmB;AACnB,kBAAkB;AAClB,sCAAsC;AACtC,+CAA+C;AAC/C,oCAAoC;AACpC,uHAAuH;AACvH,+CAA+C;AAC/C,4BAA4B;AAC5B,sBAAsB;AACtB,IAAI;AAEJ,iBAAiB;AACjB,uCAAuC;AACvC,uBAAuB;AAEvB,uCAAuC;AACvC,8BAA8B;AAC9B,qDAAqD;AACrD,uDAAuD;AACvD,YAAY;AACZ,0CAA0C;AAC1C,mBAAmB;AACnB,oBAAoB;AACpB,WAAW;AACX,sCAAsC;AACtC,sCAAsC;AACtC,mCAAmC;AACnC,gCAAgC;AAChC,WAAW;AACX,QAAQ;AACR,IAAI;AACJ,4BAA4B;AAC5B,2DAA2D;AAC3D,2CAA2C;AAC3C,+CAA+C;AAC/C,MAAM;AAEN,oCAAoC;AACpC,oCAAoC;AACpC,2CAA2C;AAC3C,mDAAmD;AACnD,mJAAmJ;AACnJ,4BAA4B;AAC5B,iDAAiD;AACjD,UAAU;AACV,QAAQ;AAER,iCAAiC;AACjC,eAAe;AACf,IAAI","sourcesContent":["// // const fs = require('fs');\n// // const http = require('http');\n// // const path = require('path');\n\n// const optionsTest = {\n//   hostname: 'localhost',\n//   port: 3000,\n//   path: '/sparql',\n//   method: 'POST',\n//   headers: {\n//     'Accept': 'table',\n//     'Content-Type': 'application/x-www-form-urlencoded',\n//   }\n// };\n\n// let watdiv = {};\n// let names = [];\n// let queryFolder = 'output/queries';\n// let filenames = fs.readdirSync(queryFolder);\n// for (let filename of filenames) {\n//   let queries = fs.readFileSync(path.join(queryFolder, filename), 'utf8').split('\\n\\n').filter((x) => x.length > 0);\n//   let name = filename.replace(/\\.txt$/, '');\n//   watdiv[name] = queries;\n//   names.push(name);\n// }\n\n// let loops = 4;\n// console.log(`name;id;results;time`);\n// callRecursive(0, 0);\n\n// function callRecursive(nameId, id) {\n//   let name = names[nameId];\n//   callQuery(watdiv[name][id], (results, time) => {\n//     console.log(`${name};${id};${results};${time}`);\n//     ++id;\n//     // if (id >= watdiv[name].length) {\n//     //   id = 0;\n//     //   ++nameId\n//     // }\n//     // if (nameId < names.length) {\n//     //   callRecursive(nameId, id);\n//     // } else if (--loops > 0) {\n//     //   callRecursive(0, 0);\n//     // }\n//   });\n// }\n// function stopQ(hrstart) {\n//     // execution time simulated with setTimeout function\n//     let hrend = process.hrtime(hrstart);\n//     return hrend[0]*1000 + hrend[1]/1000000;\n//   }\n\n// function callQuery(query, done) {\n//   let hrstart = process.hrtime();\n//   let count = -2; // ignore header lines\n//   const req = http.request(optionsTest, res => {\n//     res.on('data', data => { /*console.log(data.toString());*/ count += data.toString().split('\\n').filter(x => x.trim().length > 0).length; });\n//     res.on('end', () => {\n//       done(count, Math.floor(stopQ(hrstart)));\n//     });\n//   });\n\n//   req.write('query=' + query);\n//   req.end();\n// }\n\n\n\n"]}