{"version":3,"file":"run_validation.js","sourceRoot":"","sources":["../run_validation.ts"],"names":[],"mappings":"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","sourcesContent":["import {MCTSJoinInformation, runningMoments, aggregateValues} from '@comunica/model-trainer';\nimport * as fs from 'fs'\nimport * as path from 'node:path'\nimport * as tf from '@tensorflow/tfjs-node'\nimport { rejects } from 'assert';\n\nclass trainComunicaModel{\n    public engine: any;\n    public queries: string[];\n    public queriesEasyWatDivVal: string[];\n    public queriesMediumWatDivVal: string[];\n    public queriesHardWatDivVal: string[];\n    public queriesEasyBerlinVal: string[];\n    public queriesMediumBerlinVal: string[];\n    public queriesHardBerlinVal: string[];\n\n    public queriesVal: string[];\n\n    public loadedQueries: Promise<boolean>;\n    public modelTrainer;\n    public masterTree: any;\n    public runningMoments: runningMoments;\n\n    public constructor(){\n        const QueryEngine = require('@comunica/query-sparql-file').QueryEngineFactory;\n        this.modelTrainer = require('@comunica/model-trainer');\n        this.runningMoments = {indexes: [0,7], runningStats: new Map<number, aggregateValues>()};\n        for (const index of this.runningMoments.indexes){\n            const startPoint: aggregateValues = {N: 0, mean: 0, std: 1, M2: 1}\n            this.runningMoments.runningStats.set(index, startPoint);\n        }\n\n        this.masterTree = new this.modelTrainer.MCTSMasterTree(this.runningMoments);        \n        this.engine = new QueryEngine().create({\n            configPath: __dirname+\"/config-file.json\", // Relative or absolute path \n        });\n        this.queries = [];\n        this.queriesEasyWatDivVal = [];\n        this.queriesMediumWatDivVal = [];\n        this.queriesHardWatDivVal = [];\n        this.queriesEasyBerlinVal = [];\n        this.queriesMediumBerlinVal = [];\n        this.queriesHardBerlinVal = [];\n        this.queriesVal = [];\n    }\n\n    public async executeQuery(query: string, sources:string[], planHolder: Map<string, number>, validation: boolean){\n        this.engine = await this.engine;\n        const bindingsStream = await this.engine.queryBindings(query, {sources: sources, masterTree: this.masterTree, planHolder: planHolder, validation: validation, \n            modelLocation: 'epochBerlin4hard'});\n        return bindingsStream\n    }\n\n    public async explainQuery(query:string, sources:string[]){\n        const results = await this.engine.explain(query, {sources: sources, masterTree: this.masterTree});\n        return results\n\n    }\n\n    public async trainModel(masterMap: Map<string, MCTSJoinInformation>, numEntries: number): Promise<number>{\n        // this.engine.getModelHolder().getModel().layersValue[0][0].mWeights.print() \n        this.engine = await this.engine;\n        const episodeLoss = this.engine.trainModel(masterMap, numEntries);\n        // this.engine.getModelHolder().getModel().denseLayerValue.getWeights()[0].print();\n        return episodeLoss\n    }\n    public async validateModel(masterMap:Map<string, MCTSJoinInformation>){\n        this.engine = await this.engine;\n        const valResults: number[] = this.engine.validateModel(masterMap);\n        return valResults\n\n    }\n\n    public async loadBerlinQueriesStrengthVal(queryDir: string, difficulty: \"easy\"|\"medium\"|\"hard\"){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                const data = fs.readFileSync(queryDir, 'utf-8')\n                if (difficulty=='easy'){\n                    this.queriesEasyBerlinVal.push(data);\n                }\n                if (difficulty=='medium'){\n                    this.queriesMediumBerlinVal.push(data);\n                }\n                if(difficulty=='hard'){\n                    this.queriesHardBerlinVal.push(data);\n                }\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public saveModel(saveString: string){\n        this.engine.saveModel(saveString);\n    }\n\n    public resetMasterTree(){\n        this.masterTree = new this.modelTrainer.MCTSMasterTree(this.runningMoments);\n    }\n\n    public async awaitEngine(){\n        this.engine = await this.engine\n    }\n\n    public async loadWatDivQueriesStrengthVal(queryDir: string, difficulty: \"easy\"|\"medium\"|\"hard\"){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                const data = fs.readFileSync(queryDir, 'utf-8')\n                if (difficulty=='easy'){\n                    this.queriesEasyWatDivVal.push(data);\n                }\n                if (difficulty=='medium'){\n                    this.queriesMediumWatDivVal.push(data);\n                }\n                if(difficulty=='hard'){\n                    this.queriesHardWatDivVal.push(data);\n                }\n\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public async loadValQueries(queryDir: string) {\n        const loadingComplete = new Promise(async (resolve, reject) => {\n            try {\n                const files = await fs.promises.readdir(queryDir);\n                for (const file of files) {\n                    // Get the full paths\n                    const filePath = path.join(queryDir, file);\n                    const data = fs.readFileSync(filePath, 'utf-8');\n                    this.queriesVal.push(data);\n                    resolve(true);\n                }\n            }\n            catch (e) {\n                console.error(\"Something went wrong.\", e);\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public async loadQueries(queryDir: string, type: 'watdiv'|'berlin'){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                if(type=='watdiv'){\n                    await this.loadWatDivQueriesStrengthVal(queryDir+'/validation/easy.txt', 'easy');\n                    await this.loadWatDivQueriesStrengthVal(queryDir+'/validation/medium.txt', 'medium');\n                    await this.loadWatDivQueriesStrengthVal(queryDir+'/validation/hard.txt', 'hard');    \n                }\n                if(type=='berlin'){\n                    await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/easy.txt', 'easy');\n                    await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/medium.txt', 'medium');\n                    await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/hard.txt', 'hard');\n    \n                }\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n    public async loadQueriesVal(queryDir: string){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try{\n                await this.loadValQueries(queryDir)\n                resolve(true)\n            }\n            catch(e){\n                console.error(\"Something wrong I can feel it\", e);\n                reject();\n            }\n        });\n        return loadingComplete\n    }\n}\n\nlet trainer: trainComunicaModel = new trainComunicaModel();\n// const loadingCompleteVal = trainer.loadQueriesVal('output/validation');\nconst loadingCompleteBerlin = trainer.loadQueriesVal('queriesBerlinSmall/validationAll')\n// loadingCompleteVal.then(async result => {\n//     await trainer.awaitEngine();\n//     await validateModel('watdiv')\n// });\nloadingCompleteBerlin.then(async result =>{\n    await trainer.awaitEngine();\n    await validateModel('berlin');\n});\n\n// const loadingCompleteWatDiv = trainer.loadQueries('output', 'watdiv');\n// const loadingCompleteBerlin = trainer.loadQueries('queriesBerlin', 'berlin');\n\n// loadingCompleteWatDiv.then(async result =>{\n//     await trainer.awaitEngine();\n//     validateModel('watdiv')\n\n// })\n\nasync function validateModel(type: 'watdiv'|'berlin'){\n    if (type=='watdiv'){\n        const names = ['L1', 'L2', 'L5', 'S6', 'S7', 'C3', 'F3', 'F5', 'S2', 'S3', 'S4', 'S5', 'C1','C2','F1','F2','F4','S1'];\n        const numSims = 10;\n        const writeStream = fs.createWriteStream('validationOutputWatDiv/results.csv');\n        writeStream.write(names.join(\",\") + \"\\n\");\n\n        // let cleanedQueriesEasyVal: string[][] = trainer.queriesEasyWatDivVal.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT').slice(1));\n        // let cleanedQueriesMediumVal: string[][] = trainer.queriesMediumWatDivVal.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT').slice(1));\n        // let cleanedQueriesHardVal: string[][] = trainer.queriesHardWatDivVal.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT').slice(1)); \n        let cleanedValQueries: string[][] = trainer.queriesVal.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT').slice(1)); \n        // let cleanedValQueries: string[][] = [...cleanedQueriesEasyVal, ...cleanedQueriesMediumVal, ...cleanedQueriesHardVal]\n        const runningMoments: aggregateValues = {N: 7206, mean: 14.18043, std: 34.5460, M2: 8599808.649563214};\n        const validationResults: number[][] = await validationLoop(cleanedValQueries, 15, runningMoments)\n\n\n        writeStream.write('[ \"' + validationResults[0].join('\",\"') + '\" ]\\n');\n        writeStream.write('[ \"' + validationResults[1].join('\",\"') + '\" ]\\n');\n        writeStream.write('[ \"' + validationResults[2].join('\",\"') + '\" ]\\n');\n\n\n    }\n    if (type=='berlin'){\n        // let cleanedQueriesEasyVal:string[][] = trainer.queriesEasyBerlinVal.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1));\n        // let cleanedQueriesMediumVal:string[][] = trainer.queriesMediumBerlinVal.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1));\n        // let cleanedQueriesHardVal:string[][] = trainer.queriesHardBerlinVal.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1));\n        let valQueriesBerlin: string[][] = trainer.queriesVal.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1));\n        const runningMoments: aggregateValues = {N: 2165, mean: 10.82, std: 12.03, M2: 313265.57};\n\n        const validationResults: number[][] = await validationLoopBerlin(valQueriesBerlin, 15, runningMoments)\n        const writeStream = fs.createWriteStream('validationOutputWatDiv/results.csv');\n        writeStream.write('[ \"' + validationResults[0].join('\",\"') + '\" ]\\n');\n        writeStream.write('[ \"' + validationResults[1].join('\",\"') + '\" ]\\n');\n        writeStream.write('[ \"' + validationResults[2].join('\",\"') + '\" ]\\n');\n\n\n    }\n}\nasync function validationLoop(cleanedQueries: string[][], numSims: number, momentsY: aggregateValues){\n    // Warm up running moments\n    // for (let i = 0; i<cleanedQueries.length; i++){\n    //     const querySubset: string[] = [... cleanedQueries[i]];\n    //     for (let j = 0; j <querySubset.length; j++){\n    //         const unNormExecutionTime: number[] = [];\n    //         for (let k = 0; k<5;k++){\n    //             let startTime = process.hrtime();\n    //             const mapResults = new Map()\n    //             const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n\n    //             const bindingsStream = await trainer.executeQuery('SELECT' + querySubset[j], [\"output/dataset.nt\"], mapResults, true);\n    //             const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY, unNormExecutionTime);\n    //             await queryPromise;    \n\n    //             trainer.resetMasterTree();\n    //         }\n    //     }\n    // }\n    // console.log(\"Finished warming up the running moments\");\n    // console.log(trainer.runningMoments);\n    // console.log(momentsY);\n    const mapResultsTemp = new Map()\n    const bindingsStream = await trainer.executeQuery('SELECT' + cleanedQueries[0][0], [\"output/dataset.nt\"], mapResultsTemp, true);\n    trainer.resetMasterTree();\n\n    const lossValidationPerQueryType: number[] = [];\n    const totalExecutionTimePerQueryType: number[] = [];\n    const searchTimePerQueryType: number[] = [];\n\n    for (let i = 0; i<cleanedQueries.length; i++){\n        let totalLossQueryType = 0;\n        let totalExecutionTimeQueryType = 0;\n        let totalSearchTimeQueryType = 0;\n        const querySubset: string[] = [... cleanedQueries[i]];\n        for (let j = 0; j <querySubset.length; j++){\n            /* Execute query and record the results */\n            const unNormExecutionTime: number[] =[];\n            for (let k = 0; k<numSims;k++){\n                let startTime = process.hrtime();\n                const mapResults = new Map()\n                const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n                const bindingsStream = await trainer.executeQuery('SELECT' + querySubset[j], [\"output/dataset.nt\"], mapResults, true);\n                const endTimeSearch: number = process.hrtime()[0] + process.hrtime()[1] / 1000000000;\n                const searchTime: number = endTimeSearch - startTimeSeconds;\n                const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY, unNormExecutionTime);\n                await queryPromise;\n                \n                // Normalize the y values\n                let executionTimeValidation: number = 0;\n                for (const key of trainer.masterTree.masterMap.keys()){\n                    const joinToNormalize: MCTSJoinInformation = trainer.masterTree.masterMap.get(key.toString());\n                    executionTimeValidation = joinToNormalize.actualExecutionTime!;\n                    joinToNormalize.actualExecutionTime = (joinToNormalize.actualExecutionTime! - momentsY.mean)/momentsY.std;\n                }\n\n                /* Validate the model using the queries, we get MSE and Loss*/\n                let validationResults: number[] = await trainer.validateModel(trainer.masterTree.masterMap);\n                trainer.resetMasterTree();\n\n                totalLossQueryType += validationResults[0];\n                totalExecutionTimeQueryType+=unNormExecutionTime[0];\n                totalSearchTimeQueryType += searchTime;\n            }\n            break\n        }\n        lossValidationPerQueryType.push(totalLossQueryType/(querySubset.length*numSims));\n        totalExecutionTimePerQueryType.push(totalExecutionTimeQueryType/(querySubset.length*numSims));\n        searchTimePerQueryType.push(totalSearchTimeQueryType/(querySubset.length*numSims));\n    }\n    /* Still include MSE!*/\n    console.log(lossValidationPerQueryType)\n    console.log(totalExecutionTimePerQueryType)\n    console.log(searchTimePerQueryType)\n    return [lossValidationPerQueryType, totalExecutionTimePerQueryType, searchTimePerQueryType];\n}\n\nasync function validationLoopBerlin(cleanedQueries: string[][], numSims: number, momentsY: aggregateValues){\n    const mapResultsTemp = new Map()\n    const bindingsStream = await trainer.executeQuery(cleanedQueries[0][0], [\"queriesBerlinSmall/dataset.nt\"], mapResultsTemp, true);\n    trainer.resetMasterTree();\n    console.log(\"Finished warm-up call\")\n\n\n    const lossValidationPerQueryType: number[] = [];\n    const totalExecutionTimePerQueryType: number[] = [];\n    const searchTimePerQueryType: number[] = [];\n\n    for (let i = 0; i<cleanedQueries.length; i++){\n        let totalLossQueryType = 0;\n        let totalExecutionTimeQueryType = 0;\n        let totalSearchTimeQueryType = 0;\n        const querySubset: string[] = [... cleanedQueries[i]];\n        console.log(`Validation Queries ${i+1}/${cleanedQueries.length}`);\n\n        for (let j = 0; j <querySubset.length; j++){\n            /* Execute query and record the results */\n            const unNormExecutionTime: number[] =[];\n            for (let k = 0; k<numSims;k++){\n                let startTime = process.hrtime();\n                const mapResults = new Map()\n                const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n                const bindingsStream = await trainer.executeQuery(querySubset[j], [\"queriesBerlinSmall/dataset.nt\"], mapResults, true);\n                const endTimeSearch: number = process.hrtime()[0] + process.hrtime()[1] / 1000000000;\n                const searchTime: number = endTimeSearch - startTimeSeconds;\n                const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY, unNormExecutionTime);\n                await queryPromise;\n                \n                // Normalize the y values\n                let executionTimeValidation: number = 0;\n                for (const key of trainer.masterTree.masterMap.keys()){\n                    const joinToNormalize: MCTSJoinInformation = trainer.masterTree.masterMap.get(key.toString());\n                    executionTimeValidation = joinToNormalize.actualExecutionTime!;\n                    joinToNormalize.actualExecutionTime = (joinToNormalize.actualExecutionTime! - momentsY.mean)/momentsY.std;\n                }\n\n                /* Validate the model using the queries, we get MSE and Loss*/\n                let validationResults: number[] = await trainer.validateModel(trainer.masterTree.masterMap);\n                trainer.resetMasterTree();\n\n                totalLossQueryType += validationResults[0];\n                totalExecutionTimeQueryType+=unNormExecutionTime[0];\n                totalSearchTimeQueryType += searchTime;\n            }\n            break\n        }\n        lossValidationPerQueryType.push(totalLossQueryType/(querySubset.length*numSims));\n        totalExecutionTimePerQueryType.push(totalExecutionTimeQueryType/(querySubset.length*numSims));\n        searchTimePerQueryType.push(totalSearchTimeQueryType/(querySubset.length*numSims));\n    }\n    /* Still include MSE!*/\n    console.log(lossValidationPerQueryType)\n    console.log(totalExecutionTimePerQueryType)\n    console.log(searchTimePerQueryType)\n    return [lossValidationPerQueryType, totalExecutionTimePerQueryType, searchTimePerQueryType];\n}\nfunction addEndListener(beginTime: number, planMap: Map<string, number>, masterMap: Map<string, MCTSJoinInformation>, \n    bindingStream: any, process: any, runningMomentsY: aggregateValues, unNormExecutionTime?: number[]): Promise<boolean>{\n    /**\n     * Function that consumes the binding stream and measures elapsed time\n     */\n    const joinPlanQuery: string = Array.from(planMap)[planMap.size-1][0];\n    let numEntriesPassed: number = 0;\n    const finishedReading: Promise<boolean> = new Promise((resolve, reject) => {\n        if (!masterMap.get(joinPlanQuery)!.actualExecutionTime || masterMap.get(joinPlanQuery)!.actualExecutionTime == 0){\n            bindingStream.on('data', (binding: any) => {\n                numEntriesPassed += 1\n                // console.log(`Entry Number:${numEntriesPassed}`)\n            });\n            \n            bindingStream.on('end', () => {\n                const end: number[] = process.hrtime();\n                const endSeconds: number = end[0] + end[1] / 1000000000;\n                const elapsed: number = endSeconds-beginTime;\n                if (unNormExecutionTime){\n                    unNormExecutionTime.push(elapsed);\n                }\n                // console.log(`We have ${numEntriesPassed} Entries`)\n                // Update the running moments\n                updateRunningMoments(runningMomentsY, elapsed);\n                // Update the standardized execution time for each joinPlan\n                planMap.forEach((value, key) => {\n                    const joinInformationPrev = masterMap.get(key.toString())! \n                    joinInformationPrev.actualExecutionTime = elapsed;\n                    masterMap.set(key.toString(), joinInformationPrev);\n                })\n                // console.log(`Elapsed time ${elapsed}`);\n                // console.log(masterMap);\n                resolve(true);\n            })    \n    }});\n    return finishedReading;\n}\n\nfunction updateRunningMoments(toUpdateAggregate: aggregateValues, newValue: number){\n    toUpdateAggregate.N +=1;\n    const delta = newValue - toUpdateAggregate.mean; \n    toUpdateAggregate.mean += delta / toUpdateAggregate.N;\n    const newDelta = newValue - toUpdateAggregate.mean;\n    toUpdateAggregate.M2 += delta * newDelta;\n    toUpdateAggregate.std = Math.sqrt(toUpdateAggregate.M2 / toUpdateAggregate.N);\n}\n"]}