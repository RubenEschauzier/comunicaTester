{"version":3,"file":"comunica_experiment_berlin.js","sourceRoot":"","sources":["../comunica_experiment_berlin.ts"],"names":[],"mappings":"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","sourcesContent":["import {MCTSJoinInformation, runningMoments, aggregateValues} from '@comunica/model-trainer';\nimport * as fs from 'fs'\nimport * as path from 'node:path'\nimport * as tf from '@tensorflow/tfjs-node'\n\nclass trainComunicaModel{\n    public engine: any;\n    public queries: string[];\n    public queriesEasy: string[];\n    public queriesMedium: string[];\n    public queriesHard: string[];\n    public queriesEasyVal: string[];\n    public queriesMediumVal: string[];\n    public queriesHardVal: string[];\n    public loadedQueries: Promise<boolean>;\n    public modelTrainer;\n    public masterTree: any;\n    public runningMoments: runningMoments;\n\n    public constructor(){\n        const QueryEngine = require('@comunica/query-sparql-file').QueryEngineFactory;\n        this.modelTrainer = require('@comunica/model-trainer');\n        this.runningMoments = {indexes: [0,7], runningStats: new Map<number, aggregateValues>()};\n        for (const index of this.runningMoments.indexes){\n            const startPoint: aggregateValues = {N: 0, mean: 0, std: 1, M2: 1}\n            this.runningMoments.runningStats.set(index, startPoint);\n        }\n\n\n        this.masterTree = new this.modelTrainer.MCTSMasterTree(this.runningMoments);        \n        this.engine = new QueryEngine().create({\n            configPath: __dirname+\"/config-file.json\", // Relative or absolute path \n        });\n        this.queries = [];\n        this.queriesEasy=[];\n        this.queriesMedium=[];\n        this.queriesHard=[];\n        this.queriesEasyVal=[];\n        this.queriesMediumVal=[];\n        this.queriesHardVal=[];\n    }\n\n    public async executeQuery(query: string, sources:string[], planHolder: Map<string, number>, validation: boolean){\n        this.engine = await this.engine;\n        const bindingsStream = await this.engine.queryBindings(query, {sources: sources, masterTree: this.masterTree, planHolder: planHolder, validation: validation});\n        return bindingsStream\n    }\n\n    public async explainQuery(query:string, sources:string[]){\n        const results = await this.engine.explain(query, {sources: sources, masterTree: this.masterTree});\n        return results\n\n    }\n\n    public async trainModel(masterMap: Map<string, MCTSJoinInformation>, numEntries: number): Promise<number>{\n        // this.engine.getModelHolder().getModel().layersValue[0][0].mWeights.print() \n        this.engine = await this.engine;\n        const episodeLoss = this.engine.trainModel(masterMap, numEntries);\n        // this.engine.getModelHolder().getModel().denseLayerValue.getWeights()[0].print();\n        return episodeLoss\n    }\n    public async validateModel(masterMap:Map<string, MCTSJoinInformation>){\n        this.engine = await this.engine;\n        const valResults: number[] = this.engine.validateModel(masterMap);\n        return valResults\n\n    }\n\n\n    public async loadBerlinQueriesStrength(queryDir: string, difficulty: \"easy\"|\"medium\"|\"hard\"){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                // Get the files as an array\n                const files = await fs.promises.readdir( queryDir );\n                for( const file of files ) {\n                    // Get the full paths\n                    const filePath = path.join( queryDir, file );    \n                    const data = fs.readFileSync(filePath,'utf8');\n                    if (difficulty=='easy'){\n                        this.queriesEasy.push(data);\n                    }\n                    if (difficulty=='medium'){\n                        this.queriesMedium.push(data);\n                    }\n                    if(difficulty=='hard'){\n                        this.queriesHard.push(data);\n                    }\n                }\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public async loadBerlinQueriesStrengthVal(queryDir: string, difficulty: \"easy\"|\"medium\"|\"hard\"){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                const files = await fs.promises.readdir( queryDir );\n                for( const file of files ) {\n                    // Get the full paths\n                    const filePath = path.join( queryDir, file );    \n                \n                    const data = fs.readFileSync(filePath, 'utf-8')\n                    if (difficulty=='easy'){\n                        this.queriesEasyVal.push(data);\n                    }\n                    if (difficulty=='medium'){\n                        this.queriesMediumVal.push(data);\n                    }\n                    if(difficulty=='hard'){\n                        this.queriesHardVal.push(data);\n                    }\n                    resolve(true); \n                }\n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public async loadWatDivQueries(queryDir: string){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                await this.loadBerlinQueriesStrength(queryDir+'/easy', 'easy');\n                await this.loadBerlinQueriesStrength(queryDir+'/medium', 'medium');\n                await this.loadBerlinQueriesStrength(queryDir+'/hard', 'hard');\n                await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/easy', 'easy');\n                await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/medium', 'medium');\n                await this.loadBerlinQueriesStrengthVal(queryDir+'/validation/hard', 'hard');\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n    public saveModel(saveString: string, runningMomentsX: aggregateValues, runningMomentsY: aggregateValues){\n        this.engine.saveModel(saveString, runningMomentsX, runningMomentsY);\n    }\n\n    public resetMasterTree(){\n        this.masterTree = new this.modelTrainer.MCTSMasterTree(this.runningMoments);\n    }\n\n    public async awaitEngine(){\n        this.engine = await this.engine\n    }\n\n}\n\n\nlet trainer: trainComunicaModel = new trainComunicaModel();\n\n\n\n// Training parameters\nconst numSimulationsPerQuery: number = 10;\nconst numEpochs: number = 15;\nconst numEpochsHard: number = 10;\nconst numSimsQueryHard: number = 10\nconst hrTime = process.hrtime();\n// Initialse moments, note that std = 1 to prevent division by 0\nconst runningMomentsYEasy: aggregateValues = {N: 0, mean: 0, std: 1, M2: 1};\nconst runningMomentsYMedium: aggregateValues = {N: 0, mean: 0, std: 1, M2: 1};\nconst runningMomentsYHard: aggregateValues = {N: 0, mean: 0, std: 1, M2: 1};\n\nconst loadingComplete: Promise<boolean> = trainer.loadWatDivQueries('queriesBerlinSmall');\n// Start train on easy, continue further\nloadingComplete.then(async result => {\n    await trainModel('easy', runningMomentsYEasy, numEpochs, numSimulationsPerQuery);\n    await trainModel('medium', runningMomentsYMedium, numEpochs, numSimulationsPerQuery);\n    await trainModel('hard', runningMomentsYHard, numEpochs, numSimulationsPerQuery)\n})\n\nasync function trainModel(difficulty: \"easy\"|\"medium\"|\"hard\", momentsY: aggregateValues, nEpoch: number, nSimPerQuery: number){\n\n    let cleanedQueriesEasy:string[][] = trainer.queriesEasy.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1))\n    let cleanedQueriesMedium:string[][] = trainer.queriesMedium.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1))\n    let cleanedQueriesHard:string[][] = trainer.queriesHard.map(x=>x.replace(/\\n/g, '').replace(/\\t/g, '').split('[sep]').slice(1))\n\n    let cleanedQueriesEasyVal:string[][] = trainer.queriesEasyVal.map(x=>x.split('[sep]').slice(1));\n    let cleanedQueriesMediumVal:string[][] = trainer.queriesMediumVal.map(x=>x.split('[sep]').slice(1));\n    let cleanedQueriesHardVal:string[][] = trainer.queriesHardVal.map(x=>x.split('[sep]').slice(1));\n\n    \n    let trainQueries: string[][] = [[]];\n    let valQueries: string[][] = [[]]\n    if (difficulty=='easy'){\n        trainQueries = [...cleanedQueriesEasy];\n        valQueries = [... cleanedQueriesEasyVal]\n    }\n    if (difficulty=='medium'){\n        trainQueries = [...cleanedQueriesEasy, ...cleanedQueriesMedium ];\n        valQueries = [...cleanedQueriesEasyVal, ...cleanedQueriesMediumVal ];\n    }\n    if(difficulty=='hard'){\n        trainQueries = [...cleanedQueriesEasy, ...cleanedQueriesMedium, ...cleanedQueriesHard];\n        valQueries = [...cleanedQueriesEasyVal, ...cleanedQueriesMediumVal, ...cleanedQueriesHardVal];\n    }\n    let trainLoss: number[] = [];\n    if (difficulty=='hard'){\n        trainLoss = await trainLoop(trainQueries, valQueries, momentsY, numEpochsHard, numSimsQueryHard, difficulty);\n    }\n    else{\n        trainLoss = await trainLoop(trainQueries, valQueries, momentsY, nEpoch, nSimPerQuery, difficulty);\n    }\n    return trainLoss\n}\nasync function trainLoop(trainQueries: string[][], valQueries: string[][], momentsY: aggregateValues, nEpochPassed: number, nSimPerQuery: number, \n    difficulty: 'easy'|'medium'|'hard'){\n    const valLoss: number[] = [];\n    const valMSE: number[] = [];\n    const valExecutionTime: number[] = [];\n    const trainLoss: number[] = [];\n    const lossTrain: number[] = [];\n    // Warm up running moments\n    for (let i = 0; i<trainQueries.length; i++){\n        console.log(`Warm-up query ${i+1}/${trainQueries.length}`);\n        const querySubset: string[] = [... trainQueries[i]];\n        for (let j = 0; j <querySubset.length; j++){\n            const unNormExecutionTime: number[] = [];\n            for (let k = 0; k<5;k++){\n                let startTime = process.hrtime();\n                const mapResults = new Map()\n                const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n\n                const bindingsStream = await trainer.executeQuery(querySubset[j], [\"queriesBerlinSmall/dataset.nt\"], mapResults, true);\n                const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY, unNormExecutionTime);\n                await queryPromise;    \n\n                trainer.resetMasterTree();\n            }\n        }\n    }\n    console.log(\"Finished warming up the running moments\");\n    console.log(trainer.runningMoments);\n    console.log(momentsY);\n    console.log(`Difficulty: ${difficulty}`);\n    console.log(`We train ${nEpochPassed} epochs, perform ${nSimPerQuery} query sims and train on ${trainQueries.length} query types`)\n\n    // Warm up query\n    const mapResultsTemp = new Map()\n    const bindingsStream = await trainer.executeQuery([...trainQueries[0]][0], [\"queriesBerlinSmall/dataset.nt\"], mapResultsTemp, true);\n    trainer.resetMasterTree();\n    for (let epoch = 0; epoch<nEpochPassed; epoch++){\n        const lossQuery: number[] = []\n        for (let i = 0; i<trainQueries.length; i++){\n            console.log(`Query of ${difficulty}: ${i+1}/${trainQueries.length}`);\n            console.dir(trainQueries[i][0],{'maxArrayLength': null})\n            const querySubset: string[] = [... trainQueries[i]];\n            for (let j = 0; j <querySubset.length; j++){\n                /* Execute n queries and record the results */\n                for (let n = 0; n < nSimPerQuery; n++){\n                    let startTime = process.hrtime();\n                    const mapResults = new Map()\n                    const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n                    const bindingsStream = await trainer.executeQuery(querySubset[j], [\"queriesBerlinSmall/dataset.nt\"], mapResults, false);\n                    const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY);\n                    await queryPromise;\n\n                }\n                const numEntriesQuery: number = trainer.masterTree.getTotalEntries();\n                // Normalize the y values\n                for (const key of trainer.masterTree.masterMap.keys()){\n                    const joinToNormalize: MCTSJoinInformation = trainer.masterTree.masterMap.get(key.toString());\n                    joinToNormalize.actualExecutionTime = (joinToNormalize.actualExecutionTime! - momentsY.mean)/momentsY.std;\n                }\n\n                /* Train the model using the queries*/\n                // const startTensorBeforeClean: number = tf.memory().numTensors;\n    \n                let loss: number = await trainer.trainModel(trainer.masterTree.masterMap, numEntriesQuery);\n\n                // console.log(`Added ${tf.memory().numTensors-startTensorBeforeClean} Tensors after cleaning Tree After Training`);\n\n                trainer.resetMasterTree();\n                if (loss){\n                    lossQuery.push(loss);\n                }\n            }\n\n        \n        }\n        trainer.saveModel('epochBerlin'+epoch+difficulty, trainer.masterTree.runningMoments, momentsY);\n        lossTrain.push(sum(lossQuery)/lossQuery.length);\n        console.log(`Epoch ${epoch}, Loss: ${lossTrain[epoch]}`);\n        const valMetrics = await validationLoop(valQueries, momentsY, 5);\n        console.log(`Epoch ${epoch}, Val Loss ${valMetrics[0]}, Val MSE ${valMetrics[1]}, Val Execution Time ${valMetrics[2]}`);\n        valLoss.push(valMetrics[0]); valMSE.push(valMetrics[1]); valExecutionTime.push(valMetrics[2]); trainLoss.push(sum(lossQuery)/lossQuery.length);\n    }\n    fs.writeFileSync(path.join(__dirname, '../trainingOutputBerlin/valLoss'+difficulty+'.txt'), JSON.stringify(valLoss));\n    fs.writeFileSync(path.join(__dirname, '../trainingOutputBerlin/valMSE'+difficulty+'.txt'), JSON.stringify(valMSE));\n    fs.writeFileSync(path.join(__dirname, '../trainingOutputBerlin/valExecutionTime'+difficulty+'.txt'), JSON.stringify(valExecutionTime));\n    fs.writeFileSync(path.join(__dirname, '../trainingOutputBerlin/trainLoss'+difficulty+'.txt'), JSON.stringify(trainLoss));\n    console.log(\"Wrote file!\");\n    return lossTrain;\n}\n\nasync function validationLoop(validationQueries: string[][], momentsY: aggregateValues, numSimulationsVal: number){\n    const lossValidation: number[] = []\n    const actualExecutionTimeValidation: number[] = [];\n    const MSEValidation: number[] = [];\n    for (let i = 0; i<validationQueries.length; i++){\n        console.log(`Validation Queries ${i+1}/${validationQueries.length}`);\n        const querySubset: string[] = [... validationQueries[i]];\n        for (let j = 0; j <querySubset.length; j++){\n            /* Execute query and record the results */\n            const unNormExecutionTime: number[] =[];\n            let totalExecutionTime: number = 0;\n            let totalMSE: number = 0;\n            let totalLoss: number = 0;\n            for (let k = 0; k<numSimulationsVal;k++){\n                let startTime = process.hrtime();\n                const mapResults = new Map()\n                const startTimeSeconds = startTime[0] + startTime[1] / 1000000000 ;\n                const bindingsStream = await trainer.executeQuery(querySubset[j], [\"queriesBerlinSmall/dataset.nt\"], mapResults, true);\n                const queryPromise = addEndListener(startTimeSeconds, mapResults, trainer.masterTree.masterMap, bindingsStream, process, momentsY, unNormExecutionTime);\n                await queryPromise;\n                \n                // Normalize the y values\n                let executionTimeValidation: number = 0;\n                for (const key of trainer.masterTree.masterMap.keys()){\n                    const joinToNormalize: MCTSJoinInformation = trainer.masterTree.masterMap.get(key.toString());\n                    executionTimeValidation = joinToNormalize.actualExecutionTime!;\n                    joinToNormalize.actualExecutionTime = (joinToNormalize.actualExecutionTime! - momentsY.mean)/momentsY.std;\n                }\n                // Use unnormalized execution times to compare\n\n                /* Validate the model using the queries, we get MSE and Loss*/\n                let validationResults: number[] = await trainer.validateModel(trainer.masterTree.masterMap);\n                trainer.resetMasterTree();\n                totalLoss+=validationResults[0];\n                totalMSE+=validationResults[1];\n                totalExecutionTime+=unNormExecutionTime[0]\n    \n            }\n            lossValidation.push(totalLoss/numSimulationsVal);\n            MSEValidation.push(totalMSE/numSimulationsVal);\n            // Use unnormalized execution times to compare\n            actualExecutionTimeValidation.push(totalExecutionTime/numSimulationsVal);\n\n        }\n    }\n    const averageValidationLoss = sum(lossValidation)/lossValidation.length;\n    const averageValidationMSE = sum(MSEValidation)/MSEValidation.length;\n    const averageValExecutionTime = sum(actualExecutionTimeValidation)/actualExecutionTimeValidation.length;\n    /* Still include MSE!*/\n    return [averageValidationLoss, averageValidationMSE, averageValExecutionTime]\n}\n\nfunction sum(arr: number[]) {\n    var result = 0, n = arr.length || 0; //may use >>> 0 to ensure length is Uint32\n    while(n--) {\n      result += +arr[n]; // unary operator to ensure ToNumber conversion\n    }\n    return result;\n}\n\nfunction addEndListener(beginTime: number, planMap: Map<string, number>, masterMap: Map<string, MCTSJoinInformation>, \n    bindingStream: any, process: any, runningMomentsY: aggregateValues, unNormExecutionTime?: number[]): Promise<boolean>{\n    /**\n     * Function that consumes the binding stream and measures elapsed time\n     */\n    const joinPlanQuery: string = Array.from(planMap)[planMap.size-1][0];\n    let numEntriesPassed: number = 0;\n    const finishedReading: Promise<boolean> = new Promise((resolve, reject) => {\n        if (!masterMap.get(joinPlanQuery)!.actualExecutionTime || masterMap.get(joinPlanQuery)!.actualExecutionTime == 0){\n            bindingStream.on('data', (binding: any) => {\n                numEntriesPassed += 1\n                // console.log(`Entry Number:${numEntriesPassed}`)\n            });\n            \n            bindingStream.on('end', () => {\n                const end: number[] = process.hrtime();\n                const endSeconds: number = end[0] + end[1] / 1000000000;\n                const elapsed: number = endSeconds-beginTime;\n                if (unNormExecutionTime){\n                    unNormExecutionTime.push(elapsed);\n                }\n                // console.log(`We have ${numEntriesPassed} Entries`)\n                // Update the running moments\n                updateRunningMoments(runningMomentsY, elapsed);\n                // Update the standardized execution time for each joinPlan\n                planMap.forEach((value, key) => {\n                    const joinInformationPrev = masterMap.get(key.toString())! \n                    joinInformationPrev.actualExecutionTime = elapsed;\n                    masterMap.set(key.toString(), joinInformationPrev);\n                })\n                // console.log(`Elapsed time ${elapsed}`);\n                // console.log(masterMap);\n                resolve(true);\n            })    \n    }});\n    return finishedReading;\n}\n\nfunction updateRunningMoments(toUpdateAggregate: aggregateValues, newValue: number){\n    toUpdateAggregate.N +=1;\n    const delta = newValue - toUpdateAggregate.mean; \n    toUpdateAggregate.mean += delta / toUpdateAggregate.N;\n    const newDelta = newValue - toUpdateAggregate.mean;\n    toUpdateAggregate.M2 += delta * newDelta;\n    toUpdateAggregate.std = Math.sqrt(toUpdateAggregate.M2 / toUpdateAggregate.N);\n}\n"]}